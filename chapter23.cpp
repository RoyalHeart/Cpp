#include <iostream>

// Class
// user-defined type, consists of members(data and function)
// instance of class are called objects

// access specifier:
// public, privated, protected
// if there are no access specifier in the class, private is the default
// a struct is like a class but the default access specifier is public

// constructor:
// when we define a constructor of our own, the one that needs parameters,
// the default constructor gets removed and is not generated by a compiler
// we have copy constructor with copy assignment and move constructor with move assignment
// move constructor:
// move semantics is achieved through a move constructor and move assignment operator
// the object from which the data was moved, is left in some valid but unspecified state
// more efficient in time of execution
// move constructor accepts something called rvalue reference as an argument

// destructor:
// destructors are called when an object goes out of scope or when a pointer to an
// object is deleted. We should not call the destructor directly
// can be used to clean up taken resources

struct A_Struct // create an empty struct
{
};
class A_Class; // declare only class name
class B_Class  // create empty class
{
};
class MyClass
{
    // a constructor is a member function that has the same name as the class
    // to initialize an object of a class
private: // private access members are accessible only to other class members, not objects
    double salary;
    int *p;

public:     // all members in public access are accessible anywhere
    char c; // these are call member fields
    int student;
    double d;
    MyClass() // default constructor(without parameter)
    {
        std::cout << "Default constructor" << '\n';
    }
    ~MyClass() // destructor
    {
        delete p;
        std::cout << "Destructor invoked" << '\n';
    }

    MyClass(int student_input, double dd) // constructor that have arbitrary parameters(user-provided constructor)
    {
        student = student_input;
        d = dd;
    }
    MyClass(char input_c)
        : c{input_c} // member initializer list
    {
    }
    MyClass(const MyClass &rhs) // copy constructor
        : student{rhs.student}, d{rhs.d}, salary{rhs.salary}, p{new int{*rhs.p}}
    // initialize members with other object's members
    {
        std::cout << "User provided copy constructor invoked" << '\n';
    }
    MyClass(double salary_input, int pp)
        : salary{salary_input}, p{new int{pp}}
    {
    }
    MyClass &operator=(const MyClass &rhs) // user-defined copy assignment
    {
        student = rhs.student;
        return *this; // the overloaded = operators must return a dereferenced this pointer at the end
    }
    MyClass(MyClass &&rhs) // move constructor
        : student{std::move(student)}, d{std::move(d)}
    {
        std::cout << "User provided move constructor invoked" << '\n';
    }
    MyClass &operator=(MyClass &&otherobject) // move assignment
    {
        student = std::move(otherobject.student);
        return *this;
    }
    MyClass &operator++() // overload prefix increment operator
    {
        ++student;
        ++d;
        std::cout << "Prefix operator ++ invoked" << '\n';
        return *this;
    }
    // postfix increment can be used using prefix increment

    MyClass &operator+=(const MyClass &rhs)
    {
        this->student += rhs.student;
        this->d += rhs.d;
        return *this;
    }

    // there can be many member functions in the class
    void print_hello() // a member function inside the class
    {
        std::cout << "Hello" << '\n';
    }

    void print_student() // a function read value student from member fields and print it
    {
        std::cout << "Students number: " << student << '\n';
    }
    void print_d()
    {
        std::cout << "D number: " << d << '\n';
    }

    void print_hi(); // a member function declared inside the class but defined outside the class
};

void MyClass::print_hi()
{
    std::cout << "Hi" << '\n';
}
int main(void)
{
    MyClass class1;                     // create an object of MyClass
    MyClass class2(76, 9.3);            // invoke a user-provided constructor
    MyClass class5(4, 2.4);             // invoke a user-provided constructor
    MyClass class3 = class2;            // without copy constructor it can perform shallow copy(does not correctly
                                        // copy members of some types, such as pointers, arrays)
    class3 = class2;                    // // copy assignment
    MyClass class4 = std::move(class2); // move constructor
    class4 = std::move(class2);         // move class2 to class4

    // class4 + class2; // objects of a class are used as operands, we need to overload the
    // class4 - class2; // operators for complex types such as classes
    // need to overload them to provide a meaningful operation
    // we can overload many operators

    class2 += class5;
    class2.print_student();
    class3.print_student();
    class1.student = 5;     // student is accessible to object class1
    class1.print_student(); // function print_i() is accessible to object class1
    // class1.salary = 1000; // error because money has private access
}
// destructor invoked
